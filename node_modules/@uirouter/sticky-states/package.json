{
  "_args": [
    [
      {
        "raw": "@uirouter/sticky-states@^1.3.0",
        "scope": "@uirouter",
        "escapedName": "@uirouter%2fsticky-states",
        "name": "@uirouter/sticky-states",
        "rawSpec": "^1.3.0",
        "spec": ">=1.3.0 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\aryeh\\Documents\\Git\\dicta"
    ]
  ],
  "_from": "@uirouter/sticky-states@>=1.3.0 <2.0.0",
  "_id": "@uirouter/sticky-states@1.3.0",
  "_inCache": true,
  "_location": "/@uirouter/sticky-states",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/sticky-states-1.3.0.tgz_1493794270566_0.8711812701076269"
  },
  "_npmUser": {
    "name": "christopherthielen",
    "email": "christopherthielen@ikkyikkyikkypikangzoopboing.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@uirouter/sticky-states@^1.3.0",
    "scope": "@uirouter",
    "escapedName": "@uirouter%2fsticky-states",
    "name": "@uirouter/sticky-states",
    "rawSpec": "^1.3.0",
    "spec": ">=1.3.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/@uirouter/sticky-states/-/sticky-states-1.3.0.tgz",
  "_shasum": "25f8aaa9ec8fb69a8be85252687fca612ece450f",
  "_shrinkwrap": null,
  "_spec": "@uirouter/sticky-states@^1.3.0",
  "_where": "C:\\Users\\aryeh\\Documents\\Git\\dicta",
  "bugs": {
    "url": "https://github.com/ui-router/sticky-states/issues"
  },
  "contributors": [
    {
      "name": "Chris Thielen",
      "url": "https://github.com/christopherthielen"
    }
  ],
  "dependencies": {
    "rollup": "^0.41.6",
    "rollup-plugin-node-resolve": "^3.0.0",
    "rollup-plugin-progress": "^0.2.1",
    "rollup-plugin-sourcemaps": "^0.4.2",
    "rollup-plugin-uglify": "^1.0.2"
  },
  "description": "UI-Router Sticky States: Keep states and their components alive while a different state is activated",
  "devDependencies": {
    "@types/angular": "^1.5.20",
    "@types/angular-mocks": "^1.5.6",
    "@types/jasmine": "^2.2.34",
    "@types/jquery": "^1.10.31",
    "@types/lodash": "^4.14.38",
    "@uirouter/core": "^5.0.1",
    "angular": "^1.5.8",
    "angular-mocks": "^1.5.8",
    "awesome-typescript-loader": "3.0.0-beta.18",
    "conventional-changelog": "^1.1.0",
    "conventional-changelog-cli": "^1.1.1",
    "conventional-changelog-ui-router-core": "^1.3.0",
    "core-js": "^2.4.1",
    "jasmine-core": "^2.4.1",
    "karma": "^1.2.0",
    "karma-chrome-launcher": "~0.1.0",
    "karma-coverage": "^0.5.3",
    "karma-jasmine": "^1.0.2",
    "karma-phantomjs-launcher": "^1.0.2",
    "karma-script-launcher": "~0.1.0",
    "karma-sourcemap-loader": "^0.3.7",
    "karma-webpack": "^1.8.0",
    "lodash": "^4.16.6",
    "npm-run-all": "^3.1.1",
    "readline-sync": "^1.4.4",
    "shelljs": "^0.7.0",
    "shx": "^0.1.4",
    "ts-loader": "^2.0.0",
    "tslint": "=2.5.0",
    "typescript": "^2.1.1",
    "webpack": "^1.13.3",
    "webpack-beep-plugin": "0.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "25f8aaa9ec8fb69a8be85252687fca612ece450f",
    "tarball": "https://registry.npmjs.org/@uirouter/sticky-states/-/sticky-states-1.3.0.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "c85880bbfe8981fa72e9f0f631e4540c1638e605",
  "homepage": "https://ui-router.github.io",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "UIRouter Team",
      "url": "https://github.com/ui-router?tab=members"
    }
  ],
  "module": "lib-esm/index.js",
  "name": "@uirouter/sticky-states",
  "optionalDependencies": {},
  "peerDependencies": {
    "@uirouter/core": "^5.0.1"
  },
  "readme": "# Sticky States\n\n### Sticky States for UI-Router 1.0 &nbsp;[![Build Status](https://travis-ci.org/ui-router/sticky-states.svg?branch=master)](https://travis-ci.org/ui-router/sticky-states)\n\n## Overview and Use Case\n\n### Sticky States allows two or more trees of states to run concurrently along side each other.\n\nThe initial use case for this functionality is to implement \"tabs\" for application modules.\nUsing Sticky States, a single app can implement one state tree for each tab, and have them operate at the same time, in parallel to each other.\nEach tab is implemented as its own UI-Router state tree.\nWhile one tab is active, the other tab is inactivated, but can be reactivated without losing any work in progress.\n\nFor the tabs use case, Sticky States work best along with [Deep State Redirect](//ui-router.github.io/deep-state-redirect)\n\n### Sticky State Lifecycle\n\n\nA Sticky State is the root of a UI-Router state tree which can continue running even after it is \"exited\".\nThe sticky state (and its children) have a different lifecycle than normal states.\nThe views of a Sticky State (and all activated substates) are retained until one of two things happen:\n\n- The parent of the sticky state is exited\n- The parent of the sticky state is directly activated\n\nIf a sibling of the sticky state (or a child of a sibling) is activated, the sticky state tree will \"inactivate\".\nA transition back to the inactivate state will reactivate it.\n\n\n## Using\n\nSticky states works requires `ui-router-core` 2.0.0 or above.\nRun `npm ls` to check the version of `ui-router-core` included with the UI-Router distribution for your framework\n\n### 1) Add Plugin\n\n#### ng1\n\nIn Angular 1, register a plugin by injecting `$uiRouterProvider` in a `config()` block.\n\n```js\nimport {StickyStatesPlugin} from \"ui-router-sticky-states\";\n\nangular.module('myapp', ['ui.router']).config(function($uiRouterProvider) {\n  $uiRouterProvider.plugin(StickyStatesPlugin);\n});\n```\n\n#### ng2\n\nIn Angular 2, register a plugin in your `UIRouterConfig` class\n\n```js\nimport {StickyStatesPlugin} from \"ui-router-sticky-states\";\n\nexport class MyConfig {\n  configure(uiRouter: UIRouter) {\n    uiRouter.plugin(StickyStatesPlugin);\n  }\n}\n```\n\n#### react\n\nIn React, register a plugin after creating your `UIRouterReact` instance.\n\n```js\nimport {StickyStatesPlugin} from \"ui-router-sticky-states\";\n\nlet router = new UIRouterReact();\nrouter.plugin(StickyStatesPlugin);\n```\n\nOr, if using component bootstrapping, add the plugin in your routerConfig function.\n\n```js\nlet routerConfig = (router) => router.plugin(StickyStatesPlugin);\n\nreturn <UIRouterReact config={routerConfig}/>;\n```\n\n\n### 2) Mark a state as sticky\n\nThe sticky state's view must have its own unique ui-view (not shared by other states).\nCreate and target a named ui-view.\n\n```js\nlet adminModule = {\n  name: 'admin',\n  sticky: true,\n  views: {\n    admin: { component: AdminComponent }\n  }\n}\n```\n\nThe AdminComponent should remain active in the `ui-view` named `admin`, even if a sibling state is activated.\n\n### 3) Show/Hide the sticky component\n\nWhen a sticky state is inactive, it's often desired to hide the contents from the UI.\nThis can be achieved using [`StateService.includes`](https://ui-router.github.io/docs/latest/classes/state.stateservice.html#includes).\n\nIn some cases, `ui-sref-active` may also be used to toggle a class on the named `ui-view`.\n\n#### More\n\nThis project was ported from the [UI-Router Extras project](//christopherthielen.github.io/ui-router-extras/) for legacy UI-Router.\nFor more information, see the ui-router extras documentation: http://christopherthielen.github.io/ui-router-extras/#/sticky\n\nTODO: Rewrite docs\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ui-router/sticky-states.git"
  },
  "scripts": {
    "build": "npm run clean && tsc && tsc -m es6 -outDir lib-esm && npm run bundle",
    "bundle": "rollup -c",
    "clean": "shx rm -rf lib lib-esm bundles",
    "debug": "karma start --singleRun=false --autoWatch=true --autoWatchInterval=1 --browsers=ChromeCanary --beep",
    "prepublish": "npm run build && npm run test",
    "test": "karma start",
    "watch": "run-p watch:*",
    "watch:buildjs": "tsc -w",
    "watch:test": "karma start --singleRun=false --autoWatch=true --autoWatchInterval=1"
  },
  "typings": "lib/index.d.ts",
  "version": "1.3.0"
}
